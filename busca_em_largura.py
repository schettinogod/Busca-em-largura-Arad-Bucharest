# -*- coding: utf-8 -*-
"""Busca_em_Largura.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XLGO-PO_PUjpn-16FgjsGaVnpfXtseEU
"""

#
#Vincenzo - Inteligência Computacional - 2023
#IFF - Itaperuna - RJ
#Busca em largura em Python para resolver o problema Arad Bucharest

import queue

inicio = 'Arad'
final = 'Bucharest'
result = ''

dict_gn = {
    'Arad': {'Zerind': 75, 'Timisoara': 118, 'Sibiu': 140},
    'Bucharest': {'Urziceni': 85, 'Giurgiu': 90, 'Pitesti': 101, 'Fagaras': 211},
    'Craiova': {'Drobeta': 120, 'Pitesti': 138, 'Rimnicu': 146},
    'Drobeta': {'Mehadia': 75, 'Craiova': 120},
    'Eforie': {'Hirsova': 86},
    'Fagaras': {'Sibiu': 99, 'Bucharest': 211},
    'Giurgiu': {'Bucharest': 90},
    'Hirsova': {'Eforie': 86, 'Urziceni': 98},
    'Iasi': {'Neamt': 87, 'Vaslui': 92},
    'Lugoj': {'Mehadia': 70, 'Timisoara': 111},
    'Mehadia': {'Lugoj': 70, 'Drobeta': 75},
    'Neamt': {'Iasi': 87},
    'Oradea': {'Zerind': 71, 'Sibiu': 151},
    'Pitesti': {'Rimnicu': 97, 'Bucharest': 101, 'Craiova': 138},
    'Rimnicu': {'Sibiu': 80, 'Pitesti': 97, 'Craiova': 146},
    'Sibiu': {'Rimnicu': 80, 'Fagaras': 99, 'Arad': 140, 'Oradea': 151},
    'Timisoara': {'Lugoj': 111, 'Arad': 118},
    'Urziceni': {'Bucharest': 85, 'Hirsova': 98, 'Vaslui': 142},
    'Vaslui': {'Iasi': 92, 'Urziceni': 142},
    'Zerind': {'Oradea': 71, 'Arad': 75}
}

def expand(cityq):
    global result
    #declara que a variavel result é global, podendo ser modificada dentro da função.
    while not cityq.empty():
    #cria um loop enqunato a fila "cityq" não estiver vazia, ou seja até todos os nós serem explorados.
        custo_total, cidadestring, cidade_atual = cityq.get()
        #o método "get()" é chamado na fila "cityq" esse método remove e retorna o próximo elemento da fila.
        #porém o elemento que está sendo obtido é uma tupla contendo 3 valores que são atribuídos às variáveis.
        #custo_total =  Representa o custo acumulado até o momento para alcançar a cidade atual.
        #cidadestring =  É uma string que representa o caminho percorrido até a cidade atual.
        # Ela é formada pela concatenação das cidades visitadas separadas por vírgulas.
        if cidade_atual == final:
            result = cidadestring + " : : " + str(custo_total)
            return
        for cty in dict_gn[cidade_atual]:
            cityq.put((custo_total + dict_gn[cidade_atual][cty], cidadestring + " , " + cty, cty))

def main():
    cityq = queue.Queue()
    cityq.put((0, inicio, inicio))
    expand(cityq)
    print("O caminho total a partir da origem até o destino por busca em largura é:")
    print(result)

main()

